-- Script was generated by Devart dbForge Studio for MySQL, Version 5.0.48.0
-- Product Home Page: http://www.devart.com/dbforge/mysql/studio
-- Script date 12/6/2011 4:12:15 PM
-- Source server version: 5.1.50
-- Source connection string: User Id=root;Host=localhost;Character Set=utf8;
-- Target server version: 5.1.50
-- Target connection string: User Id=root;Host=localhost;Character Set=utf8;
-- Run this script against osae_032 to synchronize it with osae
-- Please backup your target database before running this script

--
-- Disable foreign keys
--
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

SET NAMES 'utf8';
USE osae;

--
-- Create table osae_object_type_property_option
--
CREATE TABLE osae_object_type_property_option (
  option_id INT(10) UNSIGNED ZEROFILL NOT NULL AUTO_INCREMENT,
  option_name VARCHAR(200) NOT NULL,
  property_id INT(10) UNSIGNED ZEROFILL NOT NULL,
  PRIMARY KEY (option_id),
  INDEX oase_fk_options_to_object_type_property (property_id),
  UNIQUE INDEX osae_object_type_property_options_unq (option_name, property_id),
  CONSTRAINT oase_fk_options_to_object_type_property FOREIGN KEY (property_id)
    REFERENCES osae_object_type_property(property_id) ON DELETE CASCADE ON UPDATE CASCADE
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Alter table osae_object_property
--
ALTER TABLE osae_object_property
  ADD COLUMN property_image MEDIUMBLOB DEFAULT NULL AFTER last_updated;

DELIMITER $$

--
-- Alter procedure osae_object_name_get_by_address
--
DROP PROCEDURE osae_object_name_get_by_address$$
CREATE PROCEDURE osae_object_name_get_by_address(
  IN paddress varchar(400)
)
BEGIN
  SELECT object_name FROM osae_object WHERE address=paddress;
END
$$

--
-- Alter procedure osae_sp_debug_log_add
--
DROP PROCEDURE osae_sp_debug_log_add$$
CREATE PROCEDURE osae_sp_debug_log_add(IN pentry varchar(200), IN pdebugtrace varchar(200))
BEGIN
  IF ISNULL(pentry) = FALSE THEN
    INSERT INTO osae_debug_log(entry,debug_trace) VALUES(pentry,pdebugtrace);
  END IF;
END
$$

--
-- Alter procedure osae_sp_event_log_add
--
DROP PROCEDURE osae_sp_event_log_add$$
CREATE PROCEDURE osae_sp_event_log_add(
  IN  pobject      varchar(200),
  IN  pevent       varchar(200),
  IN  pfromobject  varchar(200),
  IN  pdebuginfo   varchar(1000)
)
BEGIN
DECLARE vObjectCount INT;
DECLARE vObjectID INT;
DECLARE vObjectTypeID INT;
DECLARE vEventCount INT;
DECLARE vEventID INT;
DECLARE vFromObjectID INT DEFAULT NULL;
DECLARE vFromObjectCount INT;
DECLARE vDebugTrace VARCHAR(2000);
    SET vDebugTrace = CONCAT(COALESCE(pdebuginfo,''),' -> osae_sp_event_log_add');
    SET vFromObjectID = (SELECT object_id FROM osae_object WHERE UPPER(object_name)=UPPER(pfromobject));
    SELECT COUNT(object_id) INTO vObjectCount FROM osae_object WHERE UPPER(object_name)=UPPER(pobject);
    IF vObjectCount > 0 THEN
        SELECT object_id,object_type_id INTO vObjectID,vObjectTypeID FROM osae_object WHERE UPPER(object_name)=UPPER(pobject);
        SELECT COUNT(event_id) INTO vEventCount FROM osae_object_type_event WHERE object_type_id=vObjectTypeID AND UPPER(event_name)=UPPER(pevent);
        IF vEventCount = 1 THEN  
            CALL osae_sp_debug_log_add(CONCAT('Event_Log_add (',pobject,' ',pevent,') ',pfromobject,' vFromObjectID ',COALESCE(vFromObjectID,'NULL')),vDebugTrace);
            SELECT event_id INTO vEventID FROM osae_object_type_event WHERE object_type_id=vObjectTypeID AND UPPER(event_name)=UPPER(pevent);
            INSERT INTO osae_event_log (object_id,event_id,from_object_id,debug_trace) VALUES(vObjectID,vEventID,vFromObjectID,vDebugTrace);
        END IF;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_event_log_clear
--
DROP PROCEDURE osae_sp_event_log_clear$$
CREATE PROCEDURE osae_sp_event_log_clear()
BEGIN
    DELETE FROM osae_event_log;
    DELETE FROM osae_debug_log; 
    DELETE FROM osae_method_log;        
END
$$

--
-- Alter procedure osae_sp_method_queue_add
--
DROP PROCEDURE osae_sp_method_queue_add$$
CREATE PROCEDURE osae_sp_method_queue_add(
  IN  pobject      varchar(200),
  IN  pmethod      varchar(200),
  IN  pparameter1  varchar(1024),
  IN  pparameter2  varchar(1024),
  IN  pfromobject  varchar(200),
  IN  pdebuginfo   varchar(1000)
)
BEGIN
DECLARE vObjectCount INT;
DECLARE vObjectID INT;
DECLARE vObjectTypeID INT;
DECLARE vMethodCount INT;
DECLARE vMethodID INT;
DECLARE vSystemCount INT;
DECLARE vObjectName VARCHAR(200);
DECLARE vObjectType VARCHAR(200);
DECLARE vBaseType VARCHAR(200);
DECLARE vFromObjectID INT DEFAULT NULL;
DECLARE vFromObjectCount INT;
DECLARE vStateCount INT;
DECLARE vDebugTrace VARCHAR(1000);
DECLARE vPropertyCount INT;
DECLARE vMethod VARCHAR(200);
SET max_sp_recursion_depth = 10;
SET vDebugTrace = CONCAT(pdebuginfo,' -> osae_sp_method_queue_add');
    SET vFromObjectID = (SELECT object_id INTO vFromObjectID FROM osae_object WHERE UPPER(object_name)=UPPER(pfromobject));
    SELECT COUNT(object_id) INTO vObjectCount FROM osae_object WHERE UPPER(object_name)=UPPER(pobject);
    IF vObjectCount = 1 THEN
        SELECT object_id,object_type_id INTO vObjectID,vObjectTypeID FROM osae_object WHERE UPPER(object_name)=UPPER(pobject);
        SELECT COUNT(method_id) INTO vMethodCount FROM osae_object_type_method WHERE object_type_id=vObjectTypeID AND (UPPER(method_name)=UPPER(pmethod) OR UPPER(method_label)=UPPER(pmethod));
        IF vMethodCount > 0 THEN       
            SELECT method_id INTO vMethodID FROM osae_object_type_method WHERE object_type_id=vObjectTypeID AND (UPPER(method_name)=UPPER(pmethod) OR UPPER(method_label)=UPPER(pmethod));
            # Check to see if an app owns this, or SYSTEM, if system owns we will have to handle events....
            SELECT count(object_id) INTO vSystemCount FROM osae_v_object WHERE object_id=vObjectID AND owned_by='SYSTEM';
            IF vSystemCount = 1 THEN
                SELECT object_name,object_type,base_type INTO vObjectName,vObjectType,vBaseType FROM osae_v_object WHERE object_id=vObjectID;
                SELECT method_name INTO vMethod FROM osae_object_type_method WHERE method_id=vMethodID;        
                # Here is the magic, if the Method Name matches a State, then the Method's Job is to Set that State, so look up the state
                SELECT count(state_name) INTO vStateCount FROM osae_v_object_type_state WHERE UPPER(state_name)=UPPER(vMethod) AND object_type=vObjectType; 
                IF vStateCount = 1 THEN   
                    CALL osae_sp_object_state_set (vObjectName,vMethod,pfromobject,vDebugTrace);
                ELSE
                  SELECT count(property_name) INTO vPropertyCount FROM osae_v_object_type_property WHERE UPPER(property_name)=UPPER(vMethod) AND object_type=vObjectType; 
                  IF vPropertyCount = 1 THEN   
                      CALL osae_sp_object_property_set (vObjectName,vMethod,pparameter1,pfromobject,vDebugTrace);
                  END IF;
                END IF;                
            ELSE
                INSERT INTO osae_method_queue (object_id,method_id,parameter_1,parameter_2,from_object_id,debug_trace) VALUES(vObjectID,vMethodID,pparameter1,pparameter2,vFromObjectID,vDebugTrace);
            END IF;       
        END IF;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_method_queue_delete
--
DROP PROCEDURE osae_sp_method_queue_delete$$
CREATE PROCEDURE osae_sp_method_queue_delete(
  IN pmethodid int
)
BEGIN
    DELETE FROM osae_method_queue WHERE method_queue_id=pmethodid;
END
$$

--
-- Alter procedure osae_sp_object_add
--
DROP PROCEDURE osae_sp_object_add$$
CREATE PROCEDURE osae_sp_object_add(
  IN  pname         varchar(200),
  IN  pdescription  varchar(200),
  IN  pobjecttype   varchar(200),
  IN  paddress      varchar(200),
  IN  pcontainer    varchar(200),
  IN  penabled      tinyint(1)
)
BEGIN
DECLARE vObjectCount INT;
DECLARE vObjectTypeCount INT;
DECLARE iContainer INT;
DECLARE iObjectID INT;
DECLARE vObjectTypeID INT;
DECLARE vContainerCount INT;
DECLARE vContainerID INT DEFAULT NULL;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id, container INTO vObjectTypeID,iContainer FROM osae_object_type WHERE object_type=pobjecttype;
        SELECT COUNT(object_id) INTO vContainerCount FROM osae_v_object WHERE object_name=pcontainer AND container=1;
        IF vContainerCount = 1 THEN
            SELECT object_id INTO vContainerID FROM osae_v_object WHERE object_name=pcontainer AND container=1; 
        END IF; 
        SELECT COUNT(object_id) INTO vObjectCount FROM osae_object WHERE UPPER(object_name)=UPPER(pname) OR (UPPER(address)=UPPER(paddress) AND address IS NOT NULL AND address <> ''); 
        IF vObjectCount = 0 THEN
          INSERT INTO osae_object (object_name,object_description,object_type_id,address,container_id,enabled) VALUES(pname,pdescription,vObjectTypeID,paddress,vContainerID,penabled);
        ELSE
          CALL osae_sp_debug_log_add (CONCAT('Object_Add Failed to Add ',pname,' due to duplicate data.'),'SYSTEM');
        END IF;
        IF iContainer = 1 THEN
            SELECT object_id INTO iObjectID FROM osae_object WHERE object_name=pname;
            UPDATE osae_object SET container_id = iObjectID WHERE object_id=iObjectID;
        END IF;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_delete
--
DROP PROCEDURE osae_sp_object_delete$$
CREATE PROCEDURE osae_sp_object_delete(
  IN pname varchar(200)
)
BEGIN
  DELETE FROM osae_object WHERE object_name=pname;
END
$$

--
-- Alter procedure osae_sp_object_event_script_add
--
DROP PROCEDURE osae_sp_object_event_script_add$$
CREATE PROCEDURE osae_sp_object_event_script_add(
  IN  pobject  varchar(200),
  IN  pevent   varchar(200),
  IN  ptext    text
)
BEGIN
DECLARE vObjectCount INT;
DECLARE vObjectID INT;
DECLARE vObjectTypeID INT;
DECLARE vEventCount INT;
DECLARE vEventID INT;
    SELECT COUNT(object_id) INTO vObjectCount FROM osae_object WHERE object_name=pobject;
    IF vObjectCount > 0 THEN
        SELECT object_id,object_type_id INTO vObjectID,vObjectTypeID FROM osae_object WHERE object_name=pobject;
        SELECT COUNT(event_id) INTO vEventCount FROM osae_object_type_event WHERE object_type_id=vObjectTypeID AND (event_name=pevent OR event_label=pevent);
        IF vEventCount = 1 THEN       
            SELECT event_id INTO vEventID FROM osae_object_type_event WHERE object_type_id=vObjectTypeID AND (event_name=pevent OR event_label=pevent);
            INSERT INTO osae_object_event_script (object_id,event_id,event_script) VALUES(vObjectID,vEventID,ptext);
        END IF;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_event_script_update
--
DROP PROCEDURE osae_sp_object_event_script_update$$
CREATE PROCEDURE osae_sp_object_event_script_update(
  IN  pobject  varchar(200),
  IN  pevent   varchar(200),
  IN  ptext    text
)
BEGIN
DECLARE vObjectCount INT;
DECLARE vObjectID INT;
DECLARE vObjectTypeID INT;
DECLARE vEventCount INT;
DECLARE vEventID INT;
    SELECT COUNT(object_id) INTO vObjectCount FROM osae_object WHERE object_name=pobject;
    IF vObjectCount > 0 THEN
        SELECT object_id,object_type_id INTO vObjectID,vObjectTypeID FROM osae_object WHERE object_name=pobject;
        SELECT COUNT(event_id) INTO vEventCount FROM osae_object_type_event WHERE object_type_id=vObjectTypeID AND (event_name=pevent OR event_label=pevent);
        IF vEventCount = 1 THEN       
            SELECT event_id INTO vEventID FROM osae_object_type_event WHERE object_type_id=vObjectTypeID AND (event_name=pevent OR event_label=pevent);
            UPDATE osae_object_event_script SET event_script=ptext WHERE object_id=vObjectID AND event_id=vEventID;
        END IF;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_property_array_add
--
DROP PROCEDURE osae_sp_object_property_array_add$$
CREATE PROCEDURE osae_sp_object_property_array_add(
  IN  pobject    varchar(200),
  IN  pproperty  varchar(200),
  IN  pvalue     varchar(1000),
  IN  plabel     varchar(200)
)
BEGIN
DECLARE vObjectID INT;
DECLARE vObjectTypeID INT;
DECLARE vObjectPropertyID INT;
    SELECT object_property_id INTO vObjectPropertyID FROM osae_v_object_property WHERE UPPER(object_name)=UPPER(pobject) AND UPPER(property_name)=UPPER(pproperty);
    IF vObjectPropertyID IS NOT NULL Then
        INSERT INTO osae_object_property_array (object_property_id,item_name,item_label) VALUES(vObjectPropertyID,pvalue,plabel);
    END IF;
END
$$

--
-- Alter procedure osae_sp_object_property_array_delete
--
DROP PROCEDURE osae_sp_object_property_array_delete$$
CREATE PROCEDURE osae_sp_object_property_array_delete(
  IN  pobject    varchar(400),
  IN  pproperty  varchar(400),
  IN  pvalue     varchar(2000)
)
BEGIN
  DECLARE vPropertyArrayID INT;
  SELECT property_array_id INTO vPropertyArrayID FROM osae_v_object_property_array WHERE object_name=pobject AND property_name=pproperty AND item_name=pvalue;
  DELETE FROM osae_object_property_array WHERE object_property_array_id=vPropertyArrayID;
END
$$

--
-- Alter procedure osae_sp_object_property_array_delete_all
--
DROP PROCEDURE osae_sp_object_property_array_delete_all$$
CREATE PROCEDURE osae_sp_object_property_array_delete_all(
  IN  pobject    varchar(400),
  IN  pproperty  varchar(400)
)
BEGIN
  DECLARE vPropertyID INT;
  SELECT object_property_id INTO vPropertyID FROM osae_v_object_property WHERE object_name=pobject AND property_name=pproperty;
  DELETE FROM osae_object_property_array WHERE object_property_id=vPropertyID;
END
$$

--
-- Alter procedure osae_sp_object_property_array_get_all
--
DROP PROCEDURE osae_sp_object_property_array_get_all$$
CREATE PROCEDURE osae_sp_object_property_array_get_all(IN pobject VARCHAR(255), IN pproperty VARCHAR(255))
BEGIN
  SELECT item_name FROM osae_v_object_property_array WHERE object_name=pobject AND property_name=pproperty;
END
$$

--
-- Alter procedure osae_sp_object_property_array_get_random
--
DROP PROCEDURE osae_sp_object_property_array_get_random$$
CREATE PROCEDURE osae_sp_object_property_array_get_random(
  IN  pobject    varchar(200),
  IN  pproperty  varchar(200)
)
BEGIN
SELECT item_name FROM osae_v_object_property_array WHERE object_name=pobject AND property_name=pproperty ORDER BY RAND() LIMIT 1;
END
$$

--
-- Alter procedure osae_sp_object_property_array_update
--
DROP PROCEDURE osae_sp_object_property_array_update$$
CREATE PROCEDURE osae_sp_object_property_array_update(
  IN  pobject    varchar(200),
  IN  pproperty  varchar(200),
  IN  poldvalue  varchar(2000),
  IN  pnewvalue  varchar(2000),
  IN  pnewlabel  varchar(200)
)
BEGIN
DECLARE vObjectID INT;
DECLARE vObjectTypeID INT;
DECLARE vObjectPropertyID INT;
    SELECT object_property_id INTO vObjectPropertyID FROM osae_v_object_property WHERE UPPER(object_name)=UPPER(pobject) AND UPPER(property_name)=UPPER(pproperty);
    IF vObjectPropertyID IS NOT NULL Then
        UPDATE osae_object_property_array SET item_name=pnewvalue,item_label=pnewlabel WHERE object_property_id=vObjectPropertyID AND item_name=poldvalue;
    END IF;
END
$$

--
-- Alter procedure osae_sp_object_property_get
--
DROP PROCEDURE osae_sp_object_property_get$$
CREATE PROCEDURE osae_sp_object_property_get(
  IN  pname      varchar(200),
  IN  pproperty  varchar(200)
)
BEGIN
  SELECT property_value FROM osae_v_object_property WHERE object_name=pname AND property_name=pproperty;
END
$$

--
-- Alter procedure osae_sp_object_property_set
--
DROP PROCEDURE osae_sp_object_property_set$$
CREATE PROCEDURE osae_sp_object_property_set(
  IN  pname        varchar(200),
  IN  pproperty    varchar(200),
  IN  pvalue       varchar(255),
  IN  pfromobject  varchar(200),
  IN  pdebuginfo   varchar(2000)
)
BEGIN
DECLARE vObjectID INT DEFAULT 0;
DECLARE vObjectCount INT DEFAULT 0;
DECLARE vObjectTypeID INT DEFAULT 0;
DECLARE vPropertyID INT DEFAULT 0;
DECLARE vPropertyValue VARCHAR(2000);
DECLARE vPropertyCount INT DEFAULT 0;
DECLARE vEventCount INT;
DECLARE vDebugTrace VARCHAR(2000) DEFAULT '';
    SET vDebugTrace = CONCAT(pdebuginfo,' -> osae_sp_object_property_set');
    SELECT COUNT(object_id) INTO vObjectCount FROM osae_object WHERE UPPER(object_name)=UPPER(pname); 
    IF vObjectCount > 0 THEN  
        SELECT object_id,object_type_id INTO vObjectID,vObjectTypeID FROM osae_object WHERE UPPER(object_name)=UPPER(pname);
        SELECT COUNT(property_id) INTO vPropertyCount FROM osae_v_object_property WHERE UPPER(object_name)=UPPER(pname) AND UPPER(property_name)=UPPER(pproperty) AND (property_value IS NULL OR property_value != pvalue);        
        IF vPropertyCount > 0 THEN
            SELECT property_id,COALESCE(property_value,'') INTO vPropertyID, vPropertyValue FROM osae_v_object_property WHERE UPPER(object_name)=UPPER(pname) AND UPPER(property_name)=UPPER(pproperty) AND (property_value IS NULL OR property_value != pvalue);
            UPDATE osae_object_property SET property_value=pvalue WHERE object_id=vObjectID AND object_type_property_id=vPropertyID;
            UPDATE osae_object SET last_updated=NOW() WHERE object_id=vObjectID;            
            SELECT COUNT(event_id) INTO vEventCount FROM osae_object_type_event WHERE object_type_id=vObjectTypeID AND UPPER(event_name)=UPPER(pproperty);
            IF vEventCount > 0 THEN  
                CALL osae_sp_event_log_add(pname,pproperty,pfromobject,vDebugTrace);
            END IF;
        END IF;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_state_set
--
DROP PROCEDURE osae_sp_object_state_set$$
CREATE PROCEDURE osae_sp_object_state_set(
  IN  pname        varchar(200),
  IN  pstate       varchar(50),
  IN  pfromobject  varchar(200),
  IN  pdebuginfo   varchar(2000)
)
BEGIN
DECLARE vObjectCount INT;
DECLARE vObjectID INT;
DECLARE vObjectTypeID INT;
DECLARE vStateCount INT;
DECLARE vOldStateID INT;
DECLARE vStateID INT;
DECLARE vEventCount INT;
DECLARE vHideRedundantEvents INT;
DECLARE vDebugTrace VARCHAR(2000) DEFAULT '';
    SET vDebugTrace = CONCAT(pdebuginfo,' -> osae_sp_object_state_set');
    SELECT COUNT(object_id) INTO vObjectCount FROM osae_object WHERE UPPER(object_name)=UPPER(pname);
    IF vObjectCount = 1 THEN
        SELECT object_id,object_type_id,state_id INTO vObjectID,vObjectTypeID,vOldStateID FROM osae_object WHERE UPPER(object_name)=UPPER(pname) LIMIT 1;
        SELECT COUNT(state_id) INTO vStateCount FROM osae_object_type_state WHERE object_type_id=vObjectTypeID AND (UPPER(state_name)=UPPER(pstate) OR UPPER(state_label)=UPPER(pstate));
        IF vStateCount = 1 THEN       
            SELECT state_id INTO vStateID FROM osae_object_type_state WHERE object_type_id=vObjectTypeID AND (UPPER(state_name)=UPPER(pstate) OR UPPER(state_label)=UPPER(pstate)) LIMIT 1;
            UPDATE osae_object SET state_id=vStateID,last_updated=NOW() WHERE object_id=vObjectID;
            SELECT COUNT(event_id) INTO vEventCount FROM osae_v_object_type_event WHERE object_type_id=vObjectTypeID AND UPPER(event_name)=UPPER(pstate) LIMIT 1;
            IF vEventCount = 1 THEN
                SELECT hide_redundant_events INTO vHideRedundantEvents FROM osae_v_object_type_event WHERE object_type_id=vObjectTypeID AND UPPER(event_name)=UPPER(pstate) LIMIT 1;
                IF vOldStateID <> vStateID OR vHideRedundantEvents = 0 Then
                    CALL osae_sp_event_log_add(pname,pstate,pfromobject,vDebugTrace);
                END IF;
            END IF;  
        END IF;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_state_set_by_address
--
DROP PROCEDURE osae_sp_object_state_set_by_address$$
CREATE PROCEDURE osae_sp_object_state_set_by_address(
  IN  paddress     varchar(400),
  IN  pstate       varchar(50),
  IN  pfromobject  varchar(200),
  IN  pdebuginfo   varchar(2000)
)
BEGIN
DECLARE vObjectCount INT;
DECLARE vObjectID INT;
DECLARE vObjectTypeID INT;
DECLARE vStateCount INT;
DECLARE vOldStateID INT;
DECLARE vStateID INT;
DECLARE vEventCount INT;
DECLARE vHideRedundantEvents INT;
DECLARE vDebugTrace VARCHAR(2000) DEFAULT '';
    SET vDebugTrace = CONCAT(pdebuginfo,' -> osae_sp_object_state_set');
    SELECT COUNT(object_id) INTO vObjectCount FROM osae_object WHERE UPPER(address)=UPPER(paddress);
    IF vObjectCount = 1 THEN
        SELECT object_id,object_type_id,state_id INTO vObjectID,vObjectTypeID,vOldStateID FROM osae_object WHERE UPPER(address)=UPPER(paddress) AND paddress != '' LIMIT 1;
        SELECT COUNT(state_id) INTO vStateCount FROM osae_object_type_state WHERE object_type_id=vObjectTypeID AND (UPPER(state_name)=UPPER(pstate) OR UPPER(state_label)=UPPER(pstate));
        IF vStateCount = 1 THEN       
            SELECT state_id INTO vStateID FROM osae_object_type_state WHERE object_type_id=vObjectTypeID AND (UPPER(state_name)=UPPER(pstate) OR UPPER(state_label)=UPPER(pstate)) LIMIT 1;
            UPDATE osae_object SET state_id=vStateID,last_updated=NOW() WHERE object_id=vObjectID;
            SELECT COUNT(event_id),hide_redundant_events INTO vEventCount,vHideRedundantEvents FROM osae_v_object_type_event WHERE object_type_id=vObjectTypeID AND UPPER(event_name)=UPPER(pstate) LIMIT 1;
            IF vOldStateID <> vStateID OR vHideRedundantEvents = 0 Then
                IF vEventCount = 1 THEN  
                    CALL osae_sp_event_log_add(pname,pstate,pfromobject,vDebugTrace);
                END IF;
            END IF;  
        END IF;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_type_add
--
DROP PROCEDURE osae_sp_object_type_add$$
CREATE PROCEDURE osae_sp_object_type_add(
  IN  pname                 varchar(200),
  IN  pdesc                 varchar(200),
  IN  pownedby              varchar(200),
  IN  pbasetype             varchar(200),
  IN  ptypeowner            tinyint,
  IN  psystem               tinyint,
  IN  pcontainer            tinyint,
  IN  phideredundantevents  tinyint
)
BEGIN
DECLARE vOwnerTypeCount INT;
DECLARE vOwnerTypeID INT Default NULL;
DECLARE vBaseTypeCount INT;
DECLARE vBaseTypeID INT Default NULL;
    SELECT COUNT(object_name) INTO vOwnerTypeCount FROM osae_v_object WHERE object_name=pownedby;
    IF vOwnerTypeCount > 0 THEN
        SELECT object_id INTO vOwnerTypeID FROM osae_v_object WHERE object_name=pownedby;
    END IF; 
    SELECT COUNT(object_type) INTO vBaseTypeCount FROM osae_v_object_type WHERE object_type=pbasetype;
    IF vBaseTypeCount > 0 THEN
        SELECT object_type_id INTO vBaseTypeID FROM osae_v_object_type WHERE object_type=pbasetype;
    END IF; 
    INSERT INTO osae_object_type (object_type,object_type_description,plugin_object_id,base_type_id,system_hidden,object_type_owner,container,hide_redundant_events) VALUES(UPPER(pname),pdesc,vOwnerTypeID,vBaseTypeID,psystem,ptypeowner,pcontainer,phideredundantevents) ON DUPLICATE KEY UPDATE object_type_description=pdesc,plugin_object_id=vOwnerTypeID,base_type_id=vBaseTypeID,system_hidden=psystem,object_type_owner=ptypeowner,container=pcontainer,hide_redundant_events=phideredundantevents;
    IF vBaseTypeCount = 0 THEN
        SELECT object_type_id INTO vBaseTypeID FROM osae_object_type WHERE object_type=UPPER(pname);
        UPDATE osae_object_type SET base_type_id=vBaseTypeID WHERE object_type_id=vBaseTypeID;
    END IF;
END
$$

--
-- Alter procedure osae_sp_object_type_clone
--
DROP PROCEDURE osae_sp_object_type_clone$$
CREATE PROCEDURE osae_sp_object_type_clone(
  IN  pnewname   varchar(200),
  IN  pbasename  varchar(200)
)
BEGIN
DECLARE vBaseTypeID INT; 
DECLARE vNewTypeID INT;
    SELECT object_type_id INTO vBaseTypeID FROM osae_v_object_type WHERE object_type=pbasename;
    INSERT INTO osae_object_type (object_type,object_type_description,plugin_object_id,system_hidden,object_type_owner,base_type_id) SELECT pnewname,t.object_type_description,t.plugin_object_id,t.system_hidden,t.object_type_owner,t.base_type_id FROM osae_object_type t WHERE object_type=pbasename;
    SELECT object_type_id INTO vNewTypeID FROM osae_object_type WHERE object_type_id IS NULL;
    INSERT INTO osae_object_type_state (state_name,state_label,object_type_id) SELECT state_name,state_label,vNewTypeID FROM osae_object_type_state t WHERE object_type_id=vBaseTypeID;
    INSERT INTO osae_object_type_event (event_name,event_label,object_type_id) SELECT event_name,event_label,vNewTypeID FROM osae_object_type_event t WHERE object_type_id=vBaseTypeID;
    INSERT INTO osae_object_type_method (method_name,method_label,object_type_id) SELECT method_name,method_label,vNewTypeID FROM osae_object_type_method t WHERE object_type_id=vBaseTypeID;
    INSERT INTO osae_object_type_property (property_name,property_datatype,object_type_id) SELECT property_name,property_datatype,vNewTypeID FROM osae_object_type_property t WHERE object_type_id=vBaseTypeID;
END
$$

--
-- Alter procedure osae_sp_object_type_delete
--
DROP PROCEDURE osae_sp_object_type_delete$$
CREATE PROCEDURE osae_sp_object_type_delete(
  IN pname varchar(200)
)
BEGIN
  DELETE FROM osae_object_type WHERE object_type=pname;
END
$$

--
-- Alter procedure osae_sp_object_type_event_add
--
DROP PROCEDURE osae_sp_object_type_event_add$$
CREATE PROCEDURE osae_sp_object_type_event_add(
  IN  pname        varchar(200),
  IN  plabel       varchar(200),
  IN  pobjecttype  varchar(200)
)
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        INSERT INTO osae_object_type_event (event_name,event_label,object_type_id) VALUES(UPPER(pname),plabel,vObjectTypeID) ON DUPLICATE KEY UPDATE event_label=plabel,object_type_id=vObjectTypeID;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_type_event_delete
--
DROP PROCEDURE osae_sp_object_type_event_delete$$
CREATE PROCEDURE osae_sp_object_type_event_delete(
  IN  pname        varchar(200),
  IN  pobjecttype  varchar(200)
)
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        DELETE FROM osae_object_type_event WHERE event_name=pname AND object_type_id=vObjectTypeID;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_type_event_update
--
DROP PROCEDURE osae_sp_object_type_event_update$$
CREATE PROCEDURE osae_sp_object_type_event_update(
  IN  poldname     varchar(200),
  IN  pnewname     varchar(200),
  IN  plabel       varchar(200),
  IN  pobjecttype  varchar(200)
)
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        UPDATE osae_object_type_event SET event_name=UPPER(pnewname),event_label=plabel WHERE event_name=UPPER(poldname) AND object_type_id=vObjectTypeID;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_type_method_add
--
DROP PROCEDURE osae_sp_object_type_method_add$$
CREATE PROCEDURE osae_sp_object_type_method_add(
  IN  pname           varchar(200),
  IN  plabel          varchar(200),
  IN  pobjecttype     varchar(200),
  IN  pparam1         varchar(100),
  IN  pparam2         varchar(100),
  IN  pparam1default  varchar(1024),
  IN  pparam2default  varchar(1024)
)
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        INSERT INTO osae_object_type_method (method_name,method_label,object_type_id,param_1_label,param_2_label,param_1_default,param_2_default) VALUES(UPPER(pname),plabel,vObjectTypeID,pparam1,pparam2,pparam1default,pparam2default) ON DUPLICATE KEY UPDATE method_label=plabel,object_type_id=vObjectTypeID,param_1_label=pparam1,param_2_label=pparam2,param_1_default=pparam1default,param_2_default=pparam2default;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_type_method_delete
--
DROP PROCEDURE osae_sp_object_type_method_delete$$
CREATE PROCEDURE osae_sp_object_type_method_delete(
  IN  pname        varchar(200),
  IN  pobjecttype  varchar(200)
)
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        DELETE FROM osae_object_type_method WHERE method_name=pname AND object_type_id=vObjectTypeID;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_type_method_update
--
DROP PROCEDURE osae_sp_object_type_method_update$$
CREATE PROCEDURE osae_sp_object_type_method_update(
  IN  poldname        varchar(200),
  IN  pnewname        varchar(200),
  IN  plabel          varchar(200),
  IN  pobjecttype     varchar(200),
  IN  pparam1         varchar(100),
  IN  pparam2         varchar(100),
  IN  pparam1default  varchar(1024),
  IN  pparam2default  varchar(1024)
)
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount = 1 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        UPDATE osae_object_type_method SET method_name=UPPER(pnewname),method_label=plabel,param_1_label=pparam1,param_2_label=pparam2,param_1_default=pparam1default,param_2_default=pparam2default WHERE method_name=UPPER(poldname) AND object_type_id=vObjectTypeID;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_type_property_add
--
DROP PROCEDURE osae_sp_object_type_property_add$$
CREATE PROCEDURE osae_sp_object_type_property_add(
  IN  pname          varchar(200),
  IN  pparamtype     varchar(50),
  IN  pdefault       varchar(255),
  IN  pobjecttype    varchar(200),
  IN  ptrackhistory  tinyint(1)
)
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    # CALL osae_sp_debug_log_add (concat('vObjectTypeCount ',vObjectTypeCount));
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        INSERT INTO osae_object_type_property (property_name,property_datatype,property_default,object_type_id,track_history) VALUES(pname,pparamtype,pdefault,vObjectTypeID,ptrackhistory) ON DUPLICATE KEY UPDATE property_datatype=pparamtype,object_type_id=vObjectTypeID;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_type_property_delete
--
DROP PROCEDURE osae_sp_object_type_property_delete$$
CREATE PROCEDURE osae_sp_object_type_property_delete(
  IN  pname        varchar(200),
  IN  pobjecttype  varchar(200)
)
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        DELETE FROM osae_object_type_property WHERE property_name=pname AND object_type_id=vObjectTypeID;
    END IF; 
END
$$

--
-- Create procedure osae_sp_object_type_property_option_add
--
CREATE PROCEDURE osae_sp_object_type_property_option_add(IN pobjecttype VARCHAR(200),
                                                  IN pproperty   VARCHAR(200),
                                                  IN pvalue      VARCHAR(200)
                                                  )
BEGIN
  DECLARE vObjectTypePropertyID INT;

  SELECT property_id
  INTO
    vObjectTypePropertyID
  FROM
    osae_v_object_type_property
  WHERE
    upper(object_type) = upper(pobjecttype)
    AND upper(property_name) = upper(pproperty);
  IF vObjectTypePropertyID IS NOT NULL THEN
  INSERT INTO osae_object_type_property_option (option_name, property_id) VALUES (pvalue, vObjectTypePropertyID);
END IF;
END
$$

--
-- Create procedure osae_sp_object_type_property_option_delete
--
CREATE PROCEDURE osae_sp_object_type_property_option_delete(IN pobjecttype VARCHAR(200),
                                                     IN pproperty   VARCHAR(200),
                                                     IN pvalue      VARCHAR(200)
                                                     )
BEGIN
  DECLARE vOptionID INT;

  SELECT option_id
  INTO
    vOptionID
  FROM
    osae_v_object_type_property_option
  WHERE
    upper(object_type) = upper(pobjecttype)
    AND upper(property_name) = upper(pproperty)
    AND upper(option_name) = upper(pvalue);
  IF vOptionID IS NOT NULL THEN
  DELETE
FROM
  osae_object_type_property_option
WHERE
  option_id = vOptionID;
END IF;
END
$$

--
-- Create procedure osae_sp_object_type_property_option_update
--
CREATE PROCEDURE osae_sp_object_type_property_option_update(IN pobjecttype VARCHAR(200),
                                                     IN pproperty   VARCHAR(200),
                                                     IN pnewvalue   VARCHAR(200),
                                                     IN poldvalue   VARCHAR(200)
                                                     )
BEGIN
  DECLARE vOptionID INT;

  SELECT option_id
  INTO
    vOptionID
  FROM
    osae_v_object_type_property_option
  WHERE
    upper(object_type) = upper(pobjecttype)
    AND upper(property_name) = upper(pproperty)
    AND upper(option_name) = upper(poldvalue);
  IF vOptionID IS NOT NULL THEN
  UPDATE osae_object_type_property_option
SET
  option_name = pnewvalue
WHERE
  option_id = vOptionID;
END IF;
END
$$

--
-- Alter procedure osae_sp_object_type_property_update
--
DROP PROCEDURE osae_sp_object_type_property_update$$
CREATE PROCEDURE osae_sp_object_type_property_update(
  IN  poldname       varchar(200),
  IN  pnewname       varchar(200),
  IN  pparamtype     varchar(50),
  IN  pdefault       varchar(255),
  IN  pobjecttype    varchar(200),
  IN  ptrackhistory  tinyint(1)
)
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        UPDATE osae_object_type_property SET property_name=pnewname,property_datatype=pparamtype,property_default=pdefault,track_history=ptrackhistory WHERE property_name=poldname AND object_type_id=vObjectTypeID;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_type_state_add
--
DROP PROCEDURE osae_sp_object_type_state_add$$
CREATE PROCEDURE osae_sp_object_type_state_add(
  IN  pname        varchar(200),
  IN  plabel       varchar(200),
  IN  pobjecttype  varchar(200)
)
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        INSERT INTO osae_object_type_state (state_name,state_label,object_type_id) VALUES(UPPER(pname),plabel,vObjectTypeID) ON DUPLICATE KEY UPDATE state_label=plabel,object_type_id=vObjectTypeID;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_type_state_delete
--
DROP PROCEDURE osae_sp_object_type_state_delete$$
CREATE PROCEDURE osae_sp_object_type_state_delete(
  IN  pname        varchar(200),
  IN  pobjecttype  varchar(200)
)
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        DELETE FROM osae_object_type_state WHERE state_name=pname AND object_type_id=vObjectTypeID;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_type_state_update
--
DROP PROCEDURE osae_sp_object_type_state_update$$
CREATE PROCEDURE osae_sp_object_type_state_update(
  IN  poldname     varchar(200),
  IN  pnewname     varchar(200),
  IN  plabel       varchar(200),
  IN  pobjecttype  varchar(200)
)
BEGIN
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        UPDATE osae_object_type_state SET state_name=UPPER(pnewname),state_label=plabel WHERE state_name=UPPER(poldname) AND object_type_id=vObjectTypeID;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_object_type_update
--
DROP PROCEDURE osae_sp_object_type_update$$
CREATE PROCEDURE osae_sp_object_type_update(
  IN  poldname              varchar(200),
  IN  pnewname              varchar(200),
  IN  pdesc                 varchar(200),
  IN  pownedby              varchar(200),
  IN  pbasetype             varchar(200),
  IN  ptypeowner            tinyint,
  IN  psystem               tinyint,
  IN  pcontainer            tinyint,
  IN  phideredundantevents  tinyint
)
BEGIN
DECLARE vOwnerTypeCount INT;
DECLARE vOwnerTypeID INT Default NULL;
DECLARE vBaseTypeCount INT;
DECLARE vBaseTypeID INT Default NULL;
    SELECT COUNT(object_name) INTO vOwnerTypeCount FROM osae_v_object WHERE object_name=pownedby;
    IF vOwnerTypeCount = 1 THEN
        SELECT object_id INTO vOwnerTypeID FROM osae_v_object WHERE object_name=pownedby;
    END IF; 
    SELECT COUNT(object_type) INTO vBaseTypeCount FROM osae_v_object_type WHERE object_type=pbasetype;
    IF vBaseTypeCount = 1 THEN
        SELECT object_type_id INTO vBaseTypeID FROM osae_v_object_type WHERE object_type=pbasetype;
    END IF;     
    UPDATE osae_object_type SET object_type=UPPER(pnewname),object_type_description=pdesc,plugin_object_id=vOwnerTypeID,base_type_id=vBaseTypeID,system_hidden=psystem,object_type_owner=ptypeowner,container=pcontainer,hide_redundant_events=phideredundantevents WHERE object_type=poldname;
END
$$

--
-- Alter procedure osae_sp_object_update
--
DROP PROCEDURE osae_sp_object_update$$
CREATE PROCEDURE osae_sp_object_update(
  IN  poldname     varchar(200),
  IN  pnewname     varchar(200),
  IN  pdesc        varchar(200),
  IN  pobjecttype  varchar(200),
  IN  paddress     varchar(200),
  IN  pcontainer   varchar(200),
  IN  penabled     tinyint
)
BEGIN
DECLARE vAddressCount INT;
DECLARE vObjectTypeCount INT;
DECLARE vObjectTypeID INT;
DECLARE vContainerCount INT;
DECLARE vContainerID INT DEFAULT NULL;
    SELECT COUNT(object_type_id) INTO vObjectTypeCount FROM osae_object_type WHERE object_type=pobjecttype;
    IF vObjectTypeCount > 0 THEN
        SELECT object_type_id INTO vObjectTypeID FROM osae_object_type WHERE object_type=pobjecttype;
        SELECT COUNT(object_id) INTO vContainerCount FROM osae_v_object WHERE object_name=pcontainer AND container=1;
        IF vContainerCount = 1 THEN
            SELECT object_id INTO vContainerID FROM osae_v_object WHERE object_name=pcontainer AND container=1; 
        END IF;
        SELECT COUNT(object_id) INTO vAddressCount FROM osae_object WHERE UPPER(object_name) <> UPPER(poldname) AND (UPPER(address)=UPPER(paddress) AND address IS NOT NULL AND address <> '');                 
        IF vAddressCount = 0 THEN
          UPDATE osae_object SET object_name=pnewname,object_description=pdesc,object_type_id=vObjectTypeID,address=paddress,container_id=vContainerID,enabled=penabled,last_updated=NOW() WHERE object_name=poldname;
        ELSE
          CALL osae_sp_debug_log_add (CONCAT('Object_Updated Failed on ',pnnewame,' due to duplicate data.'),'SYSTEM');
        END IF;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_pattern_add
--
DROP PROCEDURE osae_sp_pattern_add$$
CREATE PROCEDURE osae_sp_pattern_add(
  IN pname varchar(400)
)
BEGIN
  INSERT INTO osae_pattern (pattern,script) VALUES (pname,'') ON DUPLICATE KEY UPDATE script='';
END
$$

--
-- Alter procedure osae_sp_pattern_delete
--
DROP PROCEDURE osae_sp_pattern_delete$$
CREATE PROCEDURE osae_sp_pattern_delete(
  IN pname varchar(100)
)
BEGIN
  DELETE FROM osae_pattern WHERE pattern=pname;
END
$$

--
-- Alter procedure osae_sp_pattern_match_add
--
DROP PROCEDURE osae_sp_pattern_match_add$$
CREATE PROCEDURE osae_sp_pattern_match_add(
  IN  ppattern  varchar(400),
  IN  pmatch    varchar(400)
)
BEGIN
DECLARE vPatternCount INT;
DECLARE vPatternID INT Default NULL;
    SELECT COUNT(pattern_id) INTO vPatternCount FROM osae_pattern WHERE pattern=ppattern;
    IF vPatternCount > 0 THEN
        SELECT pattern_id INTO vPatternID FROM osae_pattern WHERE pattern=ppattern;
        INSERT INTO osae_pattern_match (pattern_id,`match`) VALUES(vPatternID,pmatch) ON DUPLICATE KEY UPDATE `match`=pmatch;
    END IF; 
END
$$

--
-- Alter procedure osae_sp_pattern_match_delete
--
DROP PROCEDURE osae_sp_pattern_match_delete$$
CREATE PROCEDURE osae_sp_pattern_match_delete(
  IN pname varchar(400)
)
BEGIN
  DELETE FROM osae_pattern_match WHERE `match`=pname;
END
$$

--
-- Alter procedure osae_sp_pattern_parse
--
DROP PROCEDURE osae_sp_pattern_parse$$
CREATE PROCEDURE osae_sp_pattern_parse(
  IN ppattern varchar(2000)
)
BEGIN
  DECLARE vInput VARCHAR(2000) DEFAULT '';
  DECLARE vOutput VARCHAR(2000) DEFAULT '';  
  DECLARE vOld VARCHAR(200);  
  DECLARE vWorking VARCHAR(200); 
  DECLARE vDot INT DEFAULT 0;
  DECLARE vSpace1 INT DEFAULT 0;
  DECLARE vSpace2 INT DEFAULT 0;  
  DECLARE vObject VARCHAR(200);
  DECLARE vParam VARCHAR(200);  
  DECLARE vTemp VARCHAR(200);  
    SET vInput = ppattern; 
    SELECT INSTR(vInput,'[') INTO vSpace1;
    SELECT INSTR(vInput,']') INTO vSpace2;
        
    WHILE vSpace2 > vSpace1 DO 
      SELECT MID(vInput,vSpace1,vSpace2 - vSpace1 + 1) INTO vOld; 
      SELECT MID(vInput,vSpace1+1,vSpace2 - vSpace1 - 1) INTO vWorking; 
      #SELECT vOld, vWorking;     
      SELECT INSTR(vWorking,'.') INTO vDot;
      IF vDOT > 0 THEN
        SET vObject = LEFT(vWorking,vDot - 1);
        SET vParam = RIGHT(vWorking,LENGTH(vWorking) - vDot);
        IF vParam = 'State' THEN
          SELECT state_name INTO vTemp FROM osae_v_object WHERE object_name=vObject;        
          SET vInput = REPLACE(vInput,vOld,vTemp);
        ELSE
          SELECT property_value INTO vTemp FROM osae_v_object_property WHERE object_name=vObject AND property_name=vParam;
          SET vInput = REPLACE(vInput,vOld,vTemp);          
        END IF;      
      END IF;
      SELECT INSTR(vInput,'[') INTO vSpace1;
      SELECT INSTR(vInput,']') INTO vSpace2;
    END WHILE;
    SELECT vInput;
END
$$

--
-- Alter procedure osae_sp_pattern_update
--
DROP PROCEDURE osae_sp_pattern_update$$
CREATE PROCEDURE osae_sp_pattern_update(
  IN  poldpattern  varchar(400),
  IN  pnewpattern  varchar(400),
  IN  pscript      text
)
BEGIN
  UPDATE osae_pattern SET pattern=pnewpattern,script=pscript WHERE pattern=poldpattern;
END
$$

--
-- Alter procedure osae_sp_process_recurring
--
DROP PROCEDURE osae_sp_process_recurring$$
CREATE PROCEDURE osae_sp_process_recurring()
BEGIN
DECLARE iRECURRINGID INT;
DECLARE vOBJECTNAME VARCHAR(400) DEFAULT '';
DECLARE vMETHODNAME VARCHAR(400) DEFAULT '';
DECLARE vPARAM1 VARCHAR(200);
DECLARE vPARAM2 VARCHAR(200);
DECLARE iPATTERNID INT;
DECLARE cINTERVAL CHAR(1);
DECLARE cSUNDAY CHAR(1);
DECLARE cMONDAY CHAR(1);
DECLARE cTUESDAY CHAR(1);
DECLARE cWEDNESDAY CHAR(1);
DECLARE cTHURSDAY CHAR(1);
DECLARE cFRIDAY CHAR(1);
DECLARE cSATURDAY CHAR(1);
DECLARE dRECURRINGDATE DATE;
DECLARE iRECURRINGMINUTES INT;
DECLARE dRECURRINGDAY INT;
DECLARE dRECURRINGTIME TIME;
DECLARE dCURDATE DATE;
DECLARE dCURDATETIME DATETIME;
DECLARE dCURDAYOFWEEK INT DEFAULT 0;
DECLARE dCURDAYOFMONTH INT DEFAULT 1;
DECLARE dCURDAY INT DEFAULT 1;
DECLARE iMATCHES INT DEFAULT 0;
DECLARE iDATEDIFF INT DEFAULT 0;
DECLARE done INT DEFAULT 0;  
DECLARE cur1 CURSOR FOR SELECT recurring_id,interval_unit,recurring_time,recurring_minutes,recurring_date,recurring_day,object_name,method_name,parameter_1,parameter_2,pattern_id,sunday,monday,tuesday,wednesday,thursday,friday,saturday FROM osae_v_schedule_recurring;
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    OPEN cur1; 
    Loop_Tag: LOOP
        IF done THEN
            Leave Loop_Tag;
        END IF;
        FETCH cur1 INTO iRECURRINGID,cINTERVAL,dRECURRINGTIME,iRECURRINGMINUTES,dRECURRINGDATE,dRECURRINGDAY,vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,iPATTERNID,cSUNDAY,cMONDAY,cTUESDAY,cWEDNESDAY,cTHURSDAY,cFRIDAY,cSATURDAY;
        CALL osae_sp_debug_log_add(CONCAT('ID=',iRECURRINGID,', Interval=',cINTERVAL,' Time=',dRECURRINGTIME,' Date=',dRECURRINGDATE),'sp_process_recurring'); 
        IF NOT done THEN
            IF cINTERVAL = 'Y' THEN
                SET dCURDATE = CURDATE();
                CALL osae_sp_debug_log_add(CONCAT('--IF ',dRECURRINGDATE,' < ',dCURDATE,' THEN'),'SYSTEM'); 
                IF dRECURRINGDATE < dCURDATE THEN
                    SET iDATEDIFF = DATEDIFF(dCURDATE,dRECURRINGDATE) / 365; 
                    CALL osae_sp_debug_log_add(CONCAT('sp_process_recurring: DateDiff=',iDATEDIFF),'SYSTEM'); 
                    SET dRECURRINGDATE = DATE_ADD(dRECURRINGDATE,INTERVAL iDATEDIFF YEAR);
                    IF dRECURRINGDATE < dCURDATE THEN 
                        SET dRECURRINGDATE = DATE_ADD(dRECURRINGDATE,INTERVAL 1 YEAR);                   
                    END IF;                                     
                END IF;
                CALL osae_sp_debug_log_add(CONCAT(dRECURRINGDATE,' ',TIME(dRECURRINGTIME)),'SYSTEM'); 
                SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                IF iMATCHES = 0 THEN
                    CALL osae_sp_schedule_queue_add (CONCAT(dRECURRINGDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,iPATTERNID,iRECURRINGID);
                END IF;
              ELSEIF cINTERVAL = 'T' THEN   
                SET dCURDATETIME = NOW();             
                SET dCURDATE = CURDATE();
                IF dCURDATETIME > CONCAT(dCURDATE,' ',ADDTIME(NOW(),SEC_TO_TIME(iRECURRINGMINUTES * 60))) THEN
                    SET dCURDAYOFWEEK = dCURDAYOFWEEK + 1;
                    SET dCURDATE=DATE_ADD(CURDATE(),INTERVAL 1 DAY);
                END IF; 
                CALL osae_sp_debug_log_add(CONCAT(dRECURRINGDATE,' ',TIME(dRECURRINGTIME)),'SYSTEM'); 
                SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                IF iMATCHES = 0 THEN
                    CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',ADDTIME(NOW(),SEC_TO_TIME(iRECURRINGMINUTES * 60))),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,iPATTERNID,iRECURRINGID);
                END IF;               
            ELSEIF cINTERVAL = 'M' THEN                
                SET dCURDATE = CURDATE();
                SET dRECURRINGDATE = CONCAT(YEAR(NOW()),'-',MONTH(NOW()),'-' ,dRECURRINGDAY);                
                IF dRECURRINGDATE < dCURDATE THEN
                    CALL osae_sp_debug_log_add(CONCAT('sp_process_recurring: DateDiff=',iDATEDIFF),'SYSTEM');                
                    SET dRECURRINGDATE = DATE_ADD(dRECURRINGDATE,INTERVAL 1 MONTH);
                    IF dRECURRINGDATE < dCURDATE THEN 
                        SET dRECURRINGDATE = DATE_ADD(dRECURRINGDATE,INTERVAL 1 MONTH);                   
                    END IF;                                     
                END IF;
                CALL osae_sp_debug_log_add(CONCAT(dRECURRINGDATE,' ',TIME(dRECURRINGTIME)),'SYSTEM'); 
                SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                IF iMATCHES = 0 THEN
                    CALL osae_sp_schedule_queue_add (CONCAT(dRECURRINGDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,iPATTERNID,iRECURRINGID);
                END IF;               
            ELSEIF cINTERVAL = 'D' THEN                
                SET dCURDATETIME = NOW();
                SET dCURDATE = CURDATE();
                SET dCURDAYOFWEEK = DAYOFWEEK(NOW()); 
                SET dCURDAYOFMONTH = DAYOFMONTH(NOW());
  
                IF dCURDATETIME > CONCAT(dCURDATE,' ',dRECURRINGTIME) THEN
                    SET dCURDAYOFWEEK = dCURDAYOFWEEK + 1;
                    SET dCURDATE=DATE_ADD(CURDATE(),INTERVAL 1 DAY);
                END IF; 
                CALL osae_sp_debug_log_add(CONCAT('IF ',dCURDATETIME,' > ',dCURDATE,' ',dRECURRINGTIME,' Then Write new queue'),'SYSTEM');              
                IF dCURDAYOFWEEK = 1 AND cSUNDAY = 1 THEN
                    SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                    IF iMATCHES = 0 THEN
                        CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,iPATTERNID,iRECURRINGID);
                    END IF; 
                END IF; 
                IF dCURDAYOFWEEK = 2 AND cMONDAY = 1 THEN                
                    SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                    IF iMATCHES = 0 THEN
                        CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,iPATTERNID,iRECURRINGID);          
                    END IF; 
                END IF; 
                IF dCURDAYOFWEEK = 3 AND cTUESDAY = 1 THEN                
                    SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                    IF iMATCHES = 0 THEN
                        CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,iPATTERNID,iRECURRINGID);
                    END IF; 
                END IF;                 
                IF dCURDAYOFWEEK = 4 AND cWEDNESDAY = 1 THEN                
                    SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                    IF iMATCHES = 0 THEN
                        CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,iPATTERNID,iRECURRINGID);   
                    END IF; 
                END IF;  
                IF dCURDAYOFWEEK = 5 AND cTHURSDAY = 1 THEN                
                    SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                    IF iMATCHES = 0 THEN
                        CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,iPATTERNID,iRECURRINGID);                    
                    END IF; 
                END IF;
                IF dCURDAYOFWEEK = 6 AND cFRIDAY = 1 THEN                
                    SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                    IF iMATCHES = 0 THEN
                        CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,iPATTERNID,iRECURRINGID);                    
                    END IF; 
                END IF;
                IF dCURDAYOFWEEK = 7 AND cSATURDAY = 1 THEN                
                    SELECT COUNT(schedule_ID) INTO iMATCHES FROM osae_schedule_queue WHERE recurring_id=iRECURRINGID;      
                    IF iMATCHES = 0 THEN
                        CALL osae_sp_schedule_queue_add (CONCAT(dCURDATE,' ',TIME(dRECURRINGTIME)),vOBJECTNAME,vMETHODNAME,vPARAM1,vPARAM2,iPATTERNID,iRECURRINGID);                    
                   END IF; 
                END IF;                                                                           
            END IF;         
        END IF;
     END LOOP;
    CLOSE cur1;   
END
$$

--
-- Alter procedure osae_sp_run_scheduled_methods
--
DROP PROCEDURE osae_sp_run_scheduled_methods$$
CREATE PROCEDURE osae_sp_run_scheduled_methods()
BEGIN
DECLARE iSCHEDULEID INT;
DECLARE iOBJECTID INT DEFAULT 0;
DECLARE vObjectName VARCHAR(400) DEFAULT '';
DECLARE iMETHODID INT DEFAULT 0;
DECLARE vMethodName VARCHAR(400);
DECLARE vPARAM1 VARCHAR(200);
DECLARE vPARAM2 VARCHAR(200);
DECLARE iPATTERNID INT DEFAULT 0;
DECLARE done INT DEFAULT 0;  
DECLARE cur1 CURSOR FOR SELECT schedule_ID,COALESCE(object_name,''),method_name,parameter_1,parameter_2,pattern_id FROM osae_v_schedule_queue WHERE queue_datetime < NOW();
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    OPEN cur1; 
    Loop_Tag: LOOP
        IF done THEN
            Leave Loop_Tag;
        END IF;
        FETCH cur1 INTO iSCHEDULEID,vObjectName,vMethodName,vPARAM1,vPARAM2,iPATTERNID;
            CALL osae_sp_debug_log_add(CONCAT('Found Scheduled Method to run:',iSCHEDULEID,'  Object=',vObjectName,'   PatternID=',COALESCE(iPATTERNID,0)),'osae_sp_run_scheduled_methods');
            DELETE FROM osae_schedule_queue WHERE schedule_ID=iSCHEDULEID; 
            IF vObjectName != '' THEN
                CALL osae_sp_method_queue_add(vObjectName,vMethodName,vPARAM1,vPARAM2,'SYSTEM','osae_sp_run_scheduled_methods');
            ELSEIF iPATTERNID != 0 THEN
                CALL osae_sp_method_queue_add('SCRIPT PROCESSOR','PATTERN SCRIPT',iPATTERNID,'SYSTEM','SYSTEM','osae_sp_run_scheduled_methods');
            END IF;         
        END LOOP;
    CLOSE cur1;
    CALL osae_sp_process_recurring();   
END
$$

--
-- Alter procedure osae_sp_schedule_queue_add
--
DROP PROCEDURE osae_sp_schedule_queue_add$$
CREATE PROCEDURE osae_sp_schedule_queue_add(
  IN  pscheduleddate  datetime,
  IN  pobject         varchar(400),
  IN  pmethod         varchar(400),
  IN  pparameter1     varchar(2000),
  IN  pparameter2     varchar(2000),
  IN  ppattern        varchar(200),
  IN  precurringid    int(10)
)
BEGIN
DECLARE vObjectID INT DEFAULT NULL;
DECLARE vMethodID INT DEFAULT NULL;
DECLARE vPatternID INT DEFAULT NULL;
DECLARE vRecurringID INT DEFAULT NULL;
    SELECT pattern_id INTO vPatternID FROM osae_pattern WHERE UPPER(pattern)=UPPER(ppattern);
    SELECT object_id,method_id INTO vObjectID,vMethodID FROM osae_v_object_method WHERE UPPER(object_name)=UPPER(pobject) AND (UPPER(method_name)=UPPER(pmethod) OR UPPER(method_label)=UPPER(pmethod));
    IF precurringid > 0 THEN
        SET vRecurringID = precurringid;
    END IF;
    INSERT INTO osae_schedule_queue (queue_datetime,object_id,method_id,parameter_1,parameter_2,pattern_id,recurring_id) VALUES(pscheduleddate,vObjectID,vMethodID,pparameter1,pparameter2,vPatternID,vRecurringID);
END
$$

--
-- Alter procedure osae_sp_schedule_queue_delete
--
DROP PROCEDURE osae_sp_schedule_queue_delete$$
CREATE PROCEDURE osae_sp_schedule_queue_delete(
  IN pqueueid int
)
BEGIN
  DELETE FROM osae_schedule_queue WHERE schedule_id=pqueueid;
END
$$

--
-- Alter procedure osae_sp_schedule_recurring_add
--
DROP PROCEDURE osae_sp_schedule_recurring_add$$
CREATE PROCEDURE osae_sp_schedule_recurring_add(
  IN  pschedule_name     varchar(400),
  IN  pobject            varchar(400),
  IN  pmethod            varchar(400),
  IN  pparameter1        varchar(2000),
  IN  pparameter2        varchar(2000),
  IN  ppattern           varchar(400),
  IN  precurringtime     time,
  IN  psunday            tinyint(1),
  IN  pmonday            tinyint(1),
  IN  ptuesday           tinyint(1),
  IN  pwednesday         tinyint(1),
  IN  pthursday          tinyint(1),
  IN  pfriday            tinyint(1),
  IN  psaturday          tinyint(1),
  IN  pinterval          varchar(10),
  IN  precurringminutes  int(8),
  IN  precurringday      int(4),
  IN  precurringdate     date
)
BEGIN
DECLARE vObjectID INT DEFAULT NULL;
DECLARE vMethodID INT DEFAULT NULL;
    SELECT object_id,method_id INTO vObjectID,vMethodID FROM osae_v_object_method WHERE UPPER(object_name)=UPPER(pobject) AND (UPPER(method_name)=UPPER(pmethod) OR UPPER(method_label)=UPPER(pmethod));
    INSERT INTO osae_schedule_recurring (schedule_name,object_id,method_id,parameter_1,parameter_2,pattern_id,interval_unit,recurring_time,recurring_minutes,recurring_day,recurring_date,sunday,monday,tuesday,wednesday,thursday,friday,saturday) VALUES(pschedule_name,vObjectID,vMethodID,pparameter1,pparameter2,NULL,pinterval,precurringtime,precurringminutes,precurringday,precurringdate,psunday,pmonday,ptuesday,pwednesday,pthursday,pfriday,psaturday);
END
$$

--
-- Alter procedure osae_sp_schedule_recurring_delete
--
DROP PROCEDURE osae_sp_schedule_recurring_delete$$
CREATE PROCEDURE osae_sp_schedule_recurring_delete(
  IN pschedulename varchar(400)
)
BEGIN
    DELETE FROM osae_schedule_recurring WHERE schedule_name=pschedulename;
END
$$

--
-- Alter procedure osae_sp_schedule_recurring_update
--
DROP PROCEDURE osae_sp_schedule_recurring_update$$
CREATE PROCEDURE osae_sp_schedule_recurring_update(
  IN  poldschedulename   varchar(400),
  IN  pnewschedulename   varchar(400),
  IN  pobject            varchar(400),
  IN  pmethod            varchar(400),
  IN  pparameter1        varchar(2000),
  IN  pparameter2        varchar(2000),
  IN  ppattern           varchar(400),
  IN  precurringtime     time,
  IN  psunday            tinyint(1),
  IN  pmonday            tinyint(1),
  IN  ptuesday           tinyint(1),
  IN  pwednesday         tinyint(1),
  IN  pthursday          tinyint(1),
  IN  pfriday            tinyint(1),
  IN  psaturday          tinyint(1),
  IN  pinterval          varchar(10),
  IN  precurringminutes  int(8),
  IN  precurringday      int(4),
  IN  pprecurringdate    date
)
BEGIN
DECLARE vObjectID INT DEFAULT NULL;
DECLARE vMethodID INT DEFAULT NULL;
    SELECT object_id,method_id INTO vObjectID,vMethodID FROM osae_v_object_method WHERE UPPER(object_name)=UPPER(pobject) AND (UPPER(method_name)=UPPER(pmethod) OR UPPER(method_label)=UPPER(pmethod));
    UPDATE osae_schedule_recurring SET schedule_name=pnewschedulename,object_id=vObjectID,method_id=vMethodID,parameter_1=pparameter1,parameter_2=pparameter2,pattern_id=NULL,interval_unit=pinterval,recurring_time=precurringtime,recurring_minutes=precurringminutes,recurring_day=precurringday,recurring_date=pprecurringdate,sunday=psunday,monday=pmonday,tuesday=ptuesday,wednesday=pwednesday,thursday=pthursday,friday=pfriday,saturday=psaturday WHERE schedule_name=poldschedulename;
END
$$

--
-- Alter procedure osae_sp_screen_object_add
--
DROP PROCEDURE osae_sp_screen_object_add$$
CREATE PROCEDURE osae_sp_screen_object_add(
  IN  pscreenname   varchar(200),
  IN  pobjectname   varchar(200),
  IN  pcontrolname  varchar(200)
)
BEGIN
DECLARE vScreenID INT;
DECLARE vObjectID INT;
DECLARE vControlID INT;
    SELECT osae_fn_lookup_object_id(pscreenname) INTO vScreenID;
    SELECT osae_fn_lookup_object_id(pobjectname) INTO vObjectID;    
    SELECT osae_fn_lookup_object_id(pcontrolname) INTO vControlID;
    INSERT INTO osae_screen_object (screen_id,object_id,control_id) VALUES(vScreenID,vObjectID,vControlID);    
END
$$

--
-- Alter procedure osae_sp_system_count_occupants
--
DROP PROCEDURE osae_sp_system_count_occupants$$
CREATE PROCEDURE osae_sp_system_count_occupants()
BEGIN
DECLARE vOccupantCount INT;
DECLARE vOldCount INT;
DECLARE vTemp VARCHAR(200);
DECLARE vOutput VARCHAR(200);
    SET vOldCount = (SELECT property_value FROM osae_v_object_property WHERE object_name='SYSTEM' AND property_name='Occupants');
    SELECT COUNT(object_id) INTO vOccupantCount FROM osae_v_object WHERE object_type='PERSON' AND state_name='ON';
    IF vOldCount != vOccupantCount THEN
        CALL osae_sp_object_property_set('SYSTEM','Occupants',vOccupantCount,'SYSTEM','osae_sp_system_count_occupants');
        CASE vOccupantCount
          WHEN 0 THEN 
            SET vOutput = 'Nobody is here';
            CALL osae_sp_object_property_set('SYSTEM','Occupant String',vOutput,'SYSTEM','osae_sp_system_count_occupants');            
          WHEN 1 THEN 
            SET vOutput = (SELECT COALESCE(object_name,'Nobody') FROM osae_v_object WHERE object_type='PERSON' AND state_name='ON' LIMIT 1);
            SET vOutput = CONCAT(vOutput,' is here');
            CALL osae_sp_object_property_set('SYSTEM','Occupant String',vOutput,'SYSTEM','osae_sp_system_count_occupants');
          WHEN 2 THEN
            SET vTemp = (SELECT object_name FROM osae_v_object WHERE object_type='PERSON' AND state_name='ON' LIMIT 1);
            SET vOutput = (SELECT object_name FROM osae_v_object WHERE object_type='PERSON' AND state_name='ON' AND object_name<>vTemp LIMIT 1);    
            SET vOutput = CONCAT(vOutput,' and ',vTemp,' are here');
            CALL osae_sp_object_property_set('SYSTEM','Occupant String',vOutput,'SYSTEM','osae_sp_system_count_occupants');
         END CASE;
    END IF;
    SET vOldCount = 0;
    SET vOldCount = (SELECT COALESCE(property_value,0) FROM osae_v_object_property WHERE object_name='SYSTEM' AND property_name='Occupied Locations');
    SELECT COUNT(object_id) INTO vOccupantCount FROM osae_v_object WHERE object_type='PLACE' AND state_name='ON';
    #CALL osae_sp_debug_log_add(CONCAT('Counted Places: ',vOccupantCount, ' Old count = ',vOldCount),'SYSTEM');
    IF vOldCount != vOccupantCount THEN
        CALL osae_sp_object_property_set('SYSTEM','Occupied Locations',vOccupantCount,'SYSTEM','osae_sp_system_count_occupants');
        CASE vOccupantCount
          WHEN 0 THEN 
            SET vOutput = 'All Locations are Vacant';
            CALL osae_sp_object_property_set('SYSTEM','Occupied Location String',vOutput,'SYSTEM','osae_sp_system_count_occupants');            
          WHEN 1 THEN 
            SET vOutput = (SELECT object_name FROM osae_v_object WHERE object_type='PLACE' AND state_name='ON' LIMIT 1);
            SET vOutput = CONCAT('The ',vOutput,' is occupied');
            CALL osae_sp_object_property_set('SYSTEM','Occupied Location String',vOutput,'SYSTEM','osae_sp_system_count_occupants');
          WHEN 2 THEN
            SET vTemp = (SELECT object_name FROM osae_v_object WHERE object_type='PLACE' AND state_name='ON' LIMIT 1);
            SET vOutput = (SELECT object_name FROM osae_v_object WHERE object_type='PLACE' AND state_name='ON' AND object_name<>vTemp LIMIT 1);    
            SET vOutput = CONCAT('The ',vOutput,' and the ',vTemp,' are occupied');
            CALL osae_sp_object_property_set('SYSTEM','Occupied Location String',vOutput,'SYSTEM','osae_sp_system_count_occupants');
         END CASE;
    END IF;    
END
$$

--
-- Alter function osae_fn_lookup_object_id
--
DROP FUNCTION osae_fn_lookup_object_id$$
CREATE FUNCTION osae_fn_lookup_object_id(
  pobjectname varchar(200)
)
  RETURNS int(11)
BEGIN
DECLARE vObjectID INT;
  SELECT object_id INTO vObjectID FROM osae_object WHERE UPPER(object_name)=UPPER(pobjectname);
  RETURN vObjectID;
END
$$

--
-- Alter function osae_fn_object_property_get
--
DROP FUNCTION osae_fn_object_property_get$$
CREATE FUNCTION osae_fn_object_property_get(
  pname      varchar(200),
  pproperty  varchar(200)
)
  RETURNS varchar(2000) CHARSET utf8
BEGIN
DECLARE vProperty VARCHAR(2000) DEFAULT '';
  SELECT property_value INTO vProperty FROM osae_v_object_property WHERE object_name=pname AND property_name=pproperty;
  RETURN vProperty;
END
$$

--
-- Alter trigger osae_tr_method_queue_before_delete
--
DROP TRIGGER IF EXISTS osae_tr_method_queue_before_delete$$
CREATE TRIGGER osae_tr_method_queue_before_delete
	BEFORE DELETE
	ON osae_method_queue
	FOR EACH ROW
BEGIN
  INSERT INTO osae_method_log (entry_time,object_id,method_id,parameter_1,parameter_2,from_object_id,debug_trace) VALUES(OLD.entry_time,OLD.object_id,OLD.method_id,OLD.parameter_1,OLD.parameter_2,OLD.from_object_id,CONCAT(OLD.debug_trace,' -> osae_tr_method_queue_before_delete'));
END
$$

--
-- Alter trigger osae_tr_object_after_insert
--
DROP TRIGGER IF EXISTS osae_tr_object_after_insert$$
CREATE TRIGGER osae_tr_object_after_insert
	AFTER INSERT
	ON osae_object
	FOR EACH ROW
BEGIN
DECLARE vPropertyID INT;
DECLARE vDefault VARCHAR(255);
DECLARE done INT DEFAULT 0;  
DECLARE cur1 CURSOR FOR SELECT property_id,property_default FROM osae_object_type_property WHERE object_type_id=NEW.`object_type_id`;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    OPEN cur1; 
    REPEAT
        FETCH cur1 INTO vPropertyID,vDefault;
        IF NOT done THEN 
            INSERT INTO osae_object_property (object_id,object_type_property_id,property_value) VALUES(NEW.`object_id`,vPropertyID,vDefault);
        END IF;
    UNTIL done END REPEAT;
    CLOSE cur1;
    INSERT INTO osae_object_state_history (object_id,state_id) SELECT NEW.`object_id`, state_id FROM osae_v_object_state WHERE object_id=NEW.object_id;        
END
$$

--
-- Alter trigger osae_tr_object_before_insert
--
DROP TRIGGER IF EXISTS osae_tr_object_before_insert$$
CREATE TRIGGER osae_tr_object_before_insert
	BEFORE INSERT
	ON osae_object
	FOR EACH ROW
BEGIN
DECLARE iState INT;
    IF ISNULL(NEW.state_id) THEN
        SELECT state_id INTO iState FROM osae_object_type_state WHERE object_type_id=NEW.object_type_id AND state_name="OFF";
        SET NEW.state_id=iState;
    END IF;
END
$$

--
-- Alter trigger osae_tr_object_before_update
--
DROP TRIGGER IF EXISTS osae_tr_object_before_update$$
CREATE TRIGGER osae_tr_object_before_update
	BEFORE UPDATE
	ON osae_object
	FOR EACH ROW
BEGIN
DECLARE vState VARCHAR(50);
DECLARE vEventCount INT;
DECLARE vHideRedundantRvents INT;
DECLARE vEvent VARCHAR(200);
    IF OLD.object_type_id <> NEW.object_type_id THEN
        DELETE FROM osae_object_property WHERE object_id=OLD.object_id;
        INSERT INTO osae_object_property (object_id,object_type_property_id,property_value) SELECT OLD.object_id, property_id, property_default FROM osae_object_type_property WHERE object_type_id=NEW.object_type_id;
        DELETE FROM osae_object_state_history WHERE object_id=OLD.object_id;
        INSERT INTO osae_object_state_history (object_id,state_id) SELECT OLD.object_id, state_id FROM osae_v_object_state WHERE object_type_id=NEW.object_type_id;        
    END IF;
    IF OLD.state_id <> NEW.state_id THEN
        SET NEW.last_state_change=NOW();
        UPDATE osae_object_state_history SET times_this_hour=times_this_hour + 1, times_this_day=times_this_day + 1,times_this_month=times_this_month+1,times_this_year=times_this_year+1,times_ever=times_ever + 1 WHERE object_id=OLD.object_id AND state_id=NEW.state_id;
    END IF;    
  #  SELECT state_name INTO vState FROM osae_object_type_state WHERE object_type_id=OLD.object_type_id AND state_id=NEW.state_id;   
  #  SELECT COUNT(event_name) INTO vEventCount FROM osae_object_type_event WHERE object_type_id=OLD.object_type_id AND event_name=vState;
  #  IF vEventCount = 1 THEN
     #  SELECT event_name,hide_redundant_events INTO vEvent,vHideRedundantRvents FROM osae_v_object_type_event WHERE object_type_id=OLD.object_type_id AND event_name=vState;
     #  IF OLD.state_id <> NEW.state_id OR vHideRedundantRvents = 0 THEN          
     #       CALL osae_sp_event_log_add (OLD.object_name,vEvent);       
      #  END IF;
   # END IF;    
END
$$

--
-- Alter trigger osae_tr_object_property_after_update
--
DROP TRIGGER IF EXISTS osae_tr_object_property_after_update$$
CREATE TRIGGER osae_tr_object_property_after_update
	AFTER UPDATE
	ON osae_object_property
	FOR EACH ROW
BEGIN
  DECLARE vTrack Boolean;
    SELECT track_history INTO vTrack FROM osae_v_object_type_property WHERE property_id=NEW.object_type_property_id;
  IF vTrack THEN
      INSERT INTO osae_object_property_history (object_property_id,property_value) VALUES(NEW.object_property_id,NEW.property_value);
  END IF;
END
$$

--
-- Alter trigger osae_tr_object_property_before_update
--
DROP TRIGGER IF EXISTS osae_tr_object_property_before_update$$
CREATE TRIGGER osae_tr_object_property_before_update
	BEFORE UPDATE
	ON osae_object_property
	FOR EACH ROW
BEGIN
  IF OLD.property_value != NEW.property_value THEN
    SET NEW.Last_Updated=NOW();
  END IF;
END
$$

--
-- Alter trigger osae_tr_object_type_properties_after_insert
--
DROP TRIGGER IF EXISTS osae_tr_object_type_properties_after_insert$$
CREATE TRIGGER osae_tr_object_type_properties_after_insert
	AFTER INSERT
	ON osae_object_type_property
	FOR EACH ROW
BEGIN
    INSERT INTO osae_object_property (object_id,object_type_property_id) SELECT object_id,NEW.property_id FROM osae_object WHERE object_type_id=NEW.object_type_id;
END
$$

--
-- Alter trigger tr_osae_event_log_after_insert
--
DROP TRIGGER IF EXISTS tr_osae_event_log_after_insert$$
CREATE TRIGGER tr_osae_event_log_after_insert
	AFTER INSERT
	ON osae_event_log
	FOR EACH ROW
BEGIN
DECLARE vEventCount INT;
DECLARE vEventID INT;
DECLARE vEventScriptID INT;
DECLARE vEventName VARCHAR(200);
DECLARE vObjectName VARCHAR(200);
DECLARE vDebugTrace VARCHAR(2000);
    SET vDebugTrace = CONCAT(COALESCE(NEW.debug_trace,''),' -> tr_osae_event_log_after_insert');
    CALL osae_sp_debug_log_add(CONCAT('Event_Trigger is running for ',NEW.object_id,' ',NEW.event_id),vDebugTrace);
    SELECT COUNT(event_script_id) INTO vEventCount FROM osae_v_object_event_script WHERE object_id=NEW.object_id AND event_id=NEW.event_id AND event_script IS NOT NULL and event_script<>'';
    IF vEventCount = 1 THEN
        SELECT event_script_id,event_name,object_name INTO vEventScriptID,vEventName,vObjectName FROM osae_v_object_event_script WHERE object_id=NEW.object_id AND event_id=NEW.event_id AND event_script IS NOT NULL and event_script<>'' LIMIT 1;
        CALL osae_sp_method_queue_add ('Script Processor','EVENT SCRIPT',vEventScriptID,'','SYSTEM',vDebugTrace);
    END IF; 
END
$$

--
-- Alter trigger tr_recurring_after_insert
--
DROP TRIGGER IF EXISTS tr_recurring_after_insert$$
CREATE TRIGGER tr_recurring_after_insert
	AFTER INSERT
	ON osae_schedule_recurring
	FOR EACH ROW
BEGIN
    CALL osae_sp_process_recurring;
END
$$

--
-- Alter trigger tr_recurring_after_update
--
DROP TRIGGER IF EXISTS tr_recurring_after_update$$
CREATE TRIGGER tr_recurring_after_update
	AFTER UPDATE
	ON osae_schedule_recurring
	FOR EACH ROW
BEGIN
    CALL osae_sp_process_recurring;
END
$$

DELIMITER ;

--
-- Alter view osae_v_object
--
CREATE OR REPLACE 
VIEW osae_v_object
AS
	select `osae_object`.`object_id` AS `object_id`,`osae_object`.`object_name` AS `object_name`,`osae_object`.`object_description` AS `object_description`,`osae_object`.`object_value` AS `object_value`,`osae_object`.`address` AS `address`,`osae_object`.`last_updated` AS `last_updated`,`osae_object`.`last_state_change` AS `last_state_change`,`osae_object`.`enabled` AS `enabled`,`osae_object_type`.`object_type_id` AS `object_type_id`,`osae_object_type`.`object_type` AS `object_type`,`osae_object_type`.`object_type_description` AS `object_type_description`,`osae_object_type`.`plugin_object_id` AS `plugin_object_id`,`osae_object_type`.`system_hidden` AS `system_hidden`,`osae_object_type`.`object_type_owner` AS `object_type_owner`,`osae_object_type`.`base_type_id` AS `base_type_id`,`osae_object_type`.`container` AS `container`,`osae_object_type_state`.`state_id` AS `state_id`,`osae_object_type_state`.`state_name` AS `state_name`,`osae_object_type_state`.`state_label` AS `state_label`,`objects_2`.`object_name` AS `owned_by`,`object_types_2`.`object_type` AS `base_type`,`objects_1`.`object_name` AS `container_name`,`osae_object`.`container_id` AS `container_id`,timestampdiff(SECOND,`osae_object`.`last_state_change`,now()) AS `time_in_state` from (((((`osae_object` left join `osae_object_type` on((`osae_object`.`object_type_id` = `osae_object_type`.`object_type_id`))) left join `osae_object_type` `object_types_2` on((`osae_object_type`.`base_type_id` = `object_types_2`.`object_type_id`))) left join `osae_object` `objects_2` on((`osae_object_type`.`plugin_object_id` = `objects_2`.`object_id`))) left join `osae_object_type_state` on(((`osae_object_type`.`object_type_id` = `osae_object_type_state`.`object_type_id`) and (`osae_object_type_state`.`state_id` = `osae_object`.`state_id`)))) left join `osae_object` `objects_1` on((`objects_1`.`object_id` = `osae_object`.`container_id`)));

--
-- Create view osae_v_object_type_property_option
--
CREATE VIEW osae_v_object_type_property_option
AS
SELECT `osae_object_type_property_option`.`option_id` AS `option_id`
     , `osae_object_type_property_option`.`option_name` AS `option_name`
     , `osae_object_type_property`.`property_id` AS `property_id`
     , `osae_object_type_property`.`property_name` AS `property_name`
     , `osae_object_type_property`.`property_datatype` AS `property_datatype`
     , `osae_object_type_property`.`property_default` AS `property_default`
     , `osae_object_type_property`.`object_type_id` AS `object_type_id`
     , `osae_object_type_property`.`track_history` AS `track_history`
     , `osae_object_type`.`object_type` AS `object_type`
     , `osae_object_type`.`plugin_object_id` AS `plugin_object_id`
     , `osae_object_type`.`object_type_description` AS `object_type_description`
     , `osae_object_type`.`system_hidden` AS `system_hidden`
FROM
  ((`osae_object_type`
JOIN `osae_object_type_property`
ON ((`osae_object_type`.`object_type_id` = `osae_object_type_property`.`object_type_id`)))
JOIN `osae_object_type_property_option`
ON ((`osae_object_type_property`.`property_id` = `osae_object_type_property_option`.`property_id`)));

--
-- Alter view osae_v_screen_updates
--
CREATE OR REPLACE 
VIEW osae_v_screen_updates
AS
	select `osae_v_screen_object`.`screen_object_id` AS `screen_object_id`,`osae_v_screen_object`.`screen_id` AS `screen_id`,`osae_v_screen_object`.`object_id` AS `object_id`,`osae_v_screen_object`.`control_id` AS `control_id`,`osae_v_screen_object`.`screen_name` AS `screen_name`,`osae_v_screen_object`.`control_name` AS `control_name`,`osae_v_screen_object`.`object_name` AS `object_name`,`osae_v_screen_object`.`last_updated` AS `last_updated`,`osae_v_screen_object`.`last_state_change` AS `last_state_change`,`osae_object_type_state`.`state_name` AS `state_name`,`osae_object_type_state`.`state_label` AS `state_label`,`osae_object_type_property`.`property_name` AS `property_name`,`osae_object_property`.`property_value` AS `property_value`,`osae_v_screen_object`.`control_type` AS `control_type`,`osae_v_screen_object`.`control_base_type` AS `control_base_type` from ((((`osae_object` left join `osae_object_type_state` on((`osae_object`.`state_id` = `osae_object_type_state`.`state_id`))) join `osae_v_screen_object` on((`osae_object`.`object_id` = `osae_v_screen_object`.`object_id`))) left join `osae_object_type_property` on((`osae_object_type_property`.`object_type_id` = `osae_object`.`object_type_id`))) left join `osae_object_property` on((`osae_object_type_property`.`property_id` = `osae_object_property`.`object_type_property_id`))) where (`osae_v_screen_object`.`last_updated` > subtime(now(),'00:00:30'));

DELIMITER $$

--
-- Alter event osae_ev_day_timer
--
ALTER EVENT osae_ev_day_timer
	DO 
BEGIN
      UPDATE osae_object_state_history SET times_this_day=0;
    END
$$

--
-- Alter event osae_ev_hour_timer
--
ALTER EVENT osae_ev_hour_timer
	DO 
BEGIN
      UPDATE osae_object_state_history SET times_this_hour=0;
    END
$$

--
-- Alter event osae_ev_minute_maint
--
ALTER EVENT osae_ev_minute_maint
	DO 
BEGIN
    CALL osae_sp_object_property_set('SYSTEM','Date',CURDATE(),'SYSTEM','osae_ev_minute_maint'); 
    CALL osae_sp_object_property_set('SYSTEM','Day Of Week',DAYOFWEEK(CURDATE()),'SYSTEM','osae_ev_minute_maint'); 
    CALL osae_sp_object_property_set('SYSTEM','Day Of Month',DAYOFMONTH(CURDATE()),'SYSTEM','osae_ev_minute_maint'); 
    CALL osae_sp_run_scheduled_methods; 
    CALL osae_sp_debug_log_add('Minute timer','SYSTEM');  
END
$$

--
-- Alter event osae_ev_month_timer
--
ALTER EVENT osae_ev_month_timer
	DO 
BEGIN
      UPDATE osae_object_state_history SET times_this_month=0;
    END
$$

--
-- Alter event osae_ev_off_timer
--
ALTER EVENT osae_ev_off_timer
	DO 
BEGIN
DECLARE vObjectName VARCHAR(200);
DECLARE iLoopCount INT DEFAULT 0;
DECLARE iMethodCount INT DEFAULT 0;
DECLARE iStateCount INT DEFAULT 0;  
DECLARE done INT DEFAULT 0;  
DECLARE cur1 CURSOR FOR SELECT object_name FROM osae_v_object_property WHERE state_name<>'OFF' AND property_name='OFF TIMER' AND property_value IS NOT NULL AND property_value<>'' AND SUBTIME(NOW(),SEC_TO_TIME(property_value)) > object_last_updated;
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;
    CALL osae_sp_object_property_set('SYSTEM','Time',CURTIME(),'SYSTEM','osae_ev_off_timer');
    CALL osae_sp_object_property_set('SYSTEM','Time AMPM',DATE_FORMAT(NOW(),'%h:%i %p'),'SYSTEM','osae_ev_off_timer');    
    CALL osae_sp_system_count_occupants();
    SELECT COUNT(object_name) INTO iLoopCount FROM osae_v_object_property WHERE state_name<>'OFF' AND property_name='OFF TIMER' AND property_value IS NOT NULL AND property_value<>'' AND SUBTIME(NOW(),SEC_TO_TIME(property_value)) > object_last_updated;
    OPEN cur1; 
    Loop_Tag: LOOP
        FETCH cur1 INTO vObjectName;
        IF done THEN
         Leave  Loop_Tag;
        END IF;
            SELECT COUNT(method_id) INTO iMethodCount FROM osae_v_object_method WHERE UPPER(object_name)=UPPER(vObjectName) AND UPPER(method_name)='OFF';
            IF iMethodCount > 0 THEN
                CALL osae_sp_debug_log_add(CONCAT('Turning ',vObjectName,' Off'),'osae_ev_off_timer');
                CALL osae_sp_method_queue_add (vObjectName,'OFF','','','SYSTEM','osae_ev_off_timer');
            ELSE
                SELECT COUNT(state_id) INTO iStateCount FROM osae_v_object_state WHERE UPPER(object_name)=UPPER(vObjectName) AND UPPER(state_name)='OFF';
                IF iStateCount > 0 THEN
                    CALL osae_sp_debug_log_add(CONCAT('Turning ',vObjectName,' Off'),'osae_ev_off_timer');
                    CALL osae_sp_object_state_set (vObjectName,'OFF','SYSTEM','osae_ev_off_timer');
                END IF; 
            END IF;
    END LOOP;
    CLOSE cur1; 
 END
$$

--
-- Alter event osae_ev_year_timer
--
ALTER EVENT osae_ev_year_timer
	DO 
BEGIN
        UPDATE osae_object_state_history SET times_this_yeart=0;
    END
$$

DELIMITER ;

--
-- Enable foreign keys
--
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;



-- Set DB version 
CALL osae_sp_object_property_set('SYSTEM', 'DB Version', '0.3.3', '', '');


CALL osae_sp_object_type_add('USER CONTROL', 'User Control', 'SYSTEM', 'CONTROL', 0, 1, 0, 1);
CALL osae_sp_object_type_property_add('X', 'Integer', '', 'USER CONTROL', 1);
CALL osae_sp_object_type_property_add('Y', 'Integer', '', 'USER CONTROL', 1);
CALL osae_sp_object_type_property_add('Image', 'File', '', 'USER CONTROL', 1);
CALL osae_sp_object_type_property_add('Screen', 'String', '', 'USER CONTROL', 1);
CALL osae_sp_object_type_property_add('ZOrder', 'Integer', '', 'USER CONTROL', 1);
CALL osae_sp_object_type_property_add('Control Type', 'String', '', 'USER CONTROL', 0);

CALL osae_sp_object_type_add('USER CONTROL WEATHER', 'User Control', 'SYSTEM', 'USER CONTROL', 0, 1, 0, 1);

CALL osae_sp_object_type_add('CONTROL TIMER LABEL', 'Control - Timer Label', '', 'CONTROL TIMER LABEL', 0, 1, 0, 0);
CALL osae_sp_object_type_property_add('Back Color', 'String', '', 'CONTROL TIMER LABEL', 0);
CALL osae_sp_object_type_property_add('Font Name', 'String', '', 'CONTROL TIMER LABEL', 0);
CALL osae_sp_object_type_property_add('Font Size', 'Integer', '', 'CONTROL TIMER LABEL', 0);
CALL osae_sp_object_type_property_add('Font Color', 'String', '', 'CONTROL TIMER LABEL', 0);
CALL osae_sp_object_type_property_add('Object Name', 'String', '', 'CONTROL TIMER LABEL', 0);
CALL osae_sp_object_type_property_add('Prefix', 'String', '', 'CONTROL TIMER LABEL', 0);
CALL osae_sp_object_type_property_add('Property Name', 'String', '', 'CONTROL TIMER LABEL', 0);
CALL osae_sp_object_type_property_add('Suffix', 'String', '', 'CONTROL TIMER LABEL', 0);
CALL osae_sp_object_type_property_add('X', 'Integer', '', 'CONTROL TIMER LABEL', 0);
CALL osae_sp_object_type_property_add('Y', 'Integer', '', 'CONTROL TIMER LABEL', 0);
CALL osae_sp_object_type_property_add('ZOrder', 'Integer', '', 'CONTROL TIMER LABEL', 0);
CALL osae_sp_object_type_property_add('Type', 'String', '', 'CONTROL TIMER LABEL', 0);

CALL osae_sp_object_type_add ('VR CLIENT','Generic Plugin Class','','PLUGIN',1,1,0,1);
CALL osae_sp_object_type_state_add ('ON','Running','VR CLIENT');
CALL osae_sp_object_type_state_add ('OFF','Stopped','VR CLIENT');
CALL osae_sp_object_type_event_add ('ON','Started','VR CLIENT');
CALL osae_sp_object_type_event_add ('OFF','Stopped','VR CLIENT');
CALL osae_sp_object_type_method_add ('ON','On','VR CLIENT','','','','');
CALL osae_sp_object_type_method_add ('OFF','Off','VR CLIENT','','','','');
CALL osae_sp_object_type_method_add ('SPEAK','Say','VR CLIENT','','','','');
CALL osae_sp_object_type_method_add ('SPEAKFROM','Say From List','VR CLIENT','','','','');
CALL osae_sp_object_type_method_add ('PLAY','Play','VR CLIENT','','','','');
CALL osae_sp_object_type_method_add ('PLAYFROM','Play From List','VR CLIENT','','','','');
CALL osae_sp_object_type_method_add ('STOP','Stop','VR CLIENT','','','','');
CALL osae_sp_object_type_method_add ('PAUSE','Pause','VR CLIENT','','','','');
CALL osae_sp_object_type_method_add ('MUTEVR','Mute the Microphone','VR CLIENT','','','','');
CALL osae_sp_object_type_method_add ('SETVOICE','Set Voice','VR CLIENT','','','','');
CALL osae_sp_object_type_property_add ('Computer Name','String','','VR CLIENT',0);
CALL osae_sp_object_type_property_add ('VR Input Muted','Boolean','TRUE','VR CLIENT',0);
CALL osae_sp_object_type_property_add ('Voice','String','','VR CLIENT',1);
CALL osae_sp_object_type_property_add ('Voices','List','','VR CLIENT',0);
CALL osae_sp_object_type_property_add ('VR Enabled','Boolean','FALSE','VR CLIENT',0);
CALL osae_sp_object_type_property_add ('VR Sleep Phrase','String','Thank You','VR CLIENT',0);
CALL osae_sp_object_type_property_add ('VR Wake Phrase','String','Computer','VR CLIENT',0);
CALL osae_sp_object_type_property_add ('VR Sleep Response','String','Your Welcome','VR CLIENT',0);
CALL osae_sp_object_type_property_add ('VR Wake Response','String','Yes Master','VR CLIENT',0);

